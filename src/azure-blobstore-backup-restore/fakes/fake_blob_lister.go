// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	azure "azure-blobstore-backup-restore"
	"context"
	"sync"

	"github.com/Azure/azure-storage-blob-go/azblob"
)

type FakeBlobLister struct {
	ListBlobsFlatSegmentStub        func(context.Context, azblob.Marker, azblob.ListBlobsSegmentOptions) (*azblob.ListBlobsFlatSegmentResponse, error)
	listBlobsFlatSegmentMutex       sync.RWMutex
	listBlobsFlatSegmentArgsForCall []struct {
		arg1 context.Context
		arg2 azblob.Marker
		arg3 azblob.ListBlobsSegmentOptions
	}
	listBlobsFlatSegmentReturns struct {
		result1 *azblob.ListBlobsFlatSegmentResponse
		result2 error
	}
	listBlobsFlatSegmentReturnsOnCall map[int]struct {
		result1 *azblob.ListBlobsFlatSegmentResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlobLister) ListBlobsFlatSegment(arg1 context.Context, arg2 azblob.Marker, arg3 azblob.ListBlobsSegmentOptions) (*azblob.ListBlobsFlatSegmentResponse, error) {
	
	fake.listBlobsFlatSegmentMutex.Lock()
	ret, specificReturn := fake.listBlobsFlatSegmentReturnsOnCall[len(fake.listBlobsFlatSegmentArgsForCall)]
	fake.listBlobsFlatSegmentArgsForCall = append(fake.listBlobsFlatSegmentArgsForCall, struct {
		arg1 context.Context
		arg2 azblob.Marker
		arg3 azblob.ListBlobsSegmentOptions
	}{arg1, arg2, arg3})
	stub := fake.ListBlobsFlatSegmentStub
	fakeReturns := fake.listBlobsFlatSegmentReturns
	fake.recordInvocation("ListBlobsFlatSegment", []interface{}{arg1, arg2, arg3})
	fake.listBlobsFlatSegmentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlobLister) ListBlobsFlatSegmentCallCount() int {
	fake.listBlobsFlatSegmentMutex.RLock()
	defer fake.listBlobsFlatSegmentMutex.RUnlock()
	return len(fake.listBlobsFlatSegmentArgsForCall)
}

func (fake *FakeBlobLister) ListBlobsFlatSegmentCalls(stub func(context.Context, azblob.Marker, azblob.ListBlobsSegmentOptions) (*azblob.ListBlobsFlatSegmentResponse, error)) {
	fake.listBlobsFlatSegmentMutex.Lock()
	defer fake.listBlobsFlatSegmentMutex.Unlock()
	fake.ListBlobsFlatSegmentStub = stub
}

func (fake *FakeBlobLister) ListBlobsFlatSegmentArgsForCall(i int) (context.Context, azblob.Marker, azblob.ListBlobsSegmentOptions) {
	fake.listBlobsFlatSegmentMutex.RLock()
	defer fake.listBlobsFlatSegmentMutex.RUnlock()
	argsForCall := fake.listBlobsFlatSegmentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBlobLister) ListBlobsFlatSegmentReturns(result1 *azblob.ListBlobsFlatSegmentResponse, result2 error) {
	fake.listBlobsFlatSegmentMutex.Lock()
	defer fake.listBlobsFlatSegmentMutex.Unlock()
	fake.ListBlobsFlatSegmentStub = nil
	fake.listBlobsFlatSegmentReturns = struct {
		result1 *azblob.ListBlobsFlatSegmentResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBlobLister) ListBlobsFlatSegmentReturnsOnCall(i int, result1 *azblob.ListBlobsFlatSegmentResponse, result2 error) {
	fake.listBlobsFlatSegmentMutex.Lock()
	defer fake.listBlobsFlatSegmentMutex.Unlock()
	fake.ListBlobsFlatSegmentStub = nil
	if fake.listBlobsFlatSegmentReturnsOnCall == nil {
		fake.listBlobsFlatSegmentReturnsOnCall = make(map[int]struct {
			result1 *azblob.ListBlobsFlatSegmentResponse
			result2 error
		})
	}
	fake.listBlobsFlatSegmentReturnsOnCall[i] = struct {
		result1 *azblob.ListBlobsFlatSegmentResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBlobLister) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listBlobsFlatSegmentMutex.RLock()
	defer fake.listBlobsFlatSegmentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBlobLister) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ azure.BlobLister = new(FakeBlobLister)
