// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	azure "azure-blobstore-backup-restore"
	"sync"
)

type FakeContainer struct {
	CopyBlobsFromDifferentStorageAccountStub        func(azure.StorageAccount, string, []azure.BlobId) error
	copyBlobsFromDifferentStorageAccountMutex       sync.RWMutex
	copyBlobsFromDifferentStorageAccountArgsForCall []struct {
		arg1 azure.StorageAccount
		arg2 string
		arg3 []azure.BlobId
	}
	copyBlobsFromDifferentStorageAccountReturns struct {
		result1 error
	}
	copyBlobsFromDifferentStorageAccountReturnsOnCall map[int]struct {
		result1 error
	}
	CopyBlobsFromSameStorageAccountStub        func(string, []azure.BlobId) error
	copyBlobsFromSameStorageAccountMutex       sync.RWMutex
	copyBlobsFromSameStorageAccountArgsForCall []struct {
		arg1 string
		arg2 []azure.BlobId
	}
	copyBlobsFromSameStorageAccountReturns struct {
		result1 error
	}
	copyBlobsFromSameStorageAccountReturnsOnCall map[int]struct {
		result1 error
	}
	ListBlobsStub        func() ([]azure.BlobId, error)
	listBlobsMutex       sync.RWMutex
	listBlobsArgsForCall []struct {
	}
	listBlobsReturns struct {
		result1 []azure.BlobId
		result2 error
	}
	listBlobsReturnsOnCall map[int]struct {
		result1 []azure.BlobId
		result2 error
	}
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct {
	}
	nameReturns struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	SoftDeleteEnabledStub        func() (bool, error)
	softDeleteEnabledMutex       sync.RWMutex
	softDeleteEnabledArgsForCall []struct {
	}
	softDeleteEnabledReturns struct {
		result1 bool
		result2 error
	}
	softDeleteEnabledReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	URLStub        func() string
	uRLMutex       sync.RWMutex
	uRLArgsForCall []struct {
	}
	uRLReturns struct {
		result1 string
	}
	uRLReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainer) CopyBlobsFromDifferentStorageAccount(arg1 azure.StorageAccount, arg2 string, arg3 []azure.BlobId) error {
	var arg3Copy []azure.BlobId
	if arg3 != nil {
		arg3Copy = make([]azure.BlobId, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.copyBlobsFromDifferentStorageAccountMutex.Lock()
	ret, specificReturn := fake.copyBlobsFromDifferentStorageAccountReturnsOnCall[len(fake.copyBlobsFromDifferentStorageAccountArgsForCall)]
	fake.copyBlobsFromDifferentStorageAccountArgsForCall = append(fake.copyBlobsFromDifferentStorageAccountArgsForCall, struct {
		arg1 azure.StorageAccount
		arg2 string
		arg3 []azure.BlobId
	}{arg1, arg2, arg3Copy})
	stub := fake.CopyBlobsFromDifferentStorageAccountStub
	fakeReturns := fake.copyBlobsFromDifferentStorageAccountReturns
	fake.recordInvocation("CopyBlobsFromDifferentStorageAccount", []interface{}{arg1, arg2, arg3Copy})
	fake.copyBlobsFromDifferentStorageAccountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeContainer) CopyBlobsFromDifferentStorageAccountCallCount() int {
	fake.copyBlobsFromDifferentStorageAccountMutex.RLock()
	defer fake.copyBlobsFromDifferentStorageAccountMutex.RUnlock()
	return len(fake.copyBlobsFromDifferentStorageAccountArgsForCall)
}

func (fake *FakeContainer) CopyBlobsFromDifferentStorageAccountCalls(stub func(azure.StorageAccount, string, []azure.BlobId) error) {
	fake.copyBlobsFromDifferentStorageAccountMutex.Lock()
	defer fake.copyBlobsFromDifferentStorageAccountMutex.Unlock()
	fake.CopyBlobsFromDifferentStorageAccountStub = stub
}

func (fake *FakeContainer) CopyBlobsFromDifferentStorageAccountArgsForCall(i int) (azure.StorageAccount, string, []azure.BlobId) {
	fake.copyBlobsFromDifferentStorageAccountMutex.RLock()
	defer fake.copyBlobsFromDifferentStorageAccountMutex.RUnlock()
	argsForCall := fake.copyBlobsFromDifferentStorageAccountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeContainer) CopyBlobsFromDifferentStorageAccountReturns(result1 error) {
	fake.copyBlobsFromDifferentStorageAccountMutex.Lock()
	defer fake.copyBlobsFromDifferentStorageAccountMutex.Unlock()
	fake.CopyBlobsFromDifferentStorageAccountStub = nil
	fake.copyBlobsFromDifferentStorageAccountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainer) CopyBlobsFromDifferentStorageAccountReturnsOnCall(i int, result1 error) {
	fake.copyBlobsFromDifferentStorageAccountMutex.Lock()
	defer fake.copyBlobsFromDifferentStorageAccountMutex.Unlock()
	fake.CopyBlobsFromDifferentStorageAccountStub = nil
	if fake.copyBlobsFromDifferentStorageAccountReturnsOnCall == nil {
		fake.copyBlobsFromDifferentStorageAccountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.copyBlobsFromDifferentStorageAccountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainer) CopyBlobsFromSameStorageAccount(arg1 string, arg2 []azure.BlobId) error {
	var arg2Copy []azure.BlobId
	if arg2 != nil {
		arg2Copy = make([]azure.BlobId, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.copyBlobsFromSameStorageAccountMutex.Lock()
	ret, specificReturn := fake.copyBlobsFromSameStorageAccountReturnsOnCall[len(fake.copyBlobsFromSameStorageAccountArgsForCall)]
	fake.copyBlobsFromSameStorageAccountArgsForCall = append(fake.copyBlobsFromSameStorageAccountArgsForCall, struct {
		arg1 string
		arg2 []azure.BlobId
	}{arg1, arg2Copy})
	stub := fake.CopyBlobsFromSameStorageAccountStub
	fakeReturns := fake.copyBlobsFromSameStorageAccountReturns
	fake.recordInvocation("CopyBlobsFromSameStorageAccount", []interface{}{arg1, arg2Copy})
	fake.copyBlobsFromSameStorageAccountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeContainer) CopyBlobsFromSameStorageAccountCallCount() int {
	fake.copyBlobsFromSameStorageAccountMutex.RLock()
	defer fake.copyBlobsFromSameStorageAccountMutex.RUnlock()
	return len(fake.copyBlobsFromSameStorageAccountArgsForCall)
}

func (fake *FakeContainer) CopyBlobsFromSameStorageAccountCalls(stub func(string, []azure.BlobId) error) {
	fake.copyBlobsFromSameStorageAccountMutex.Lock()
	defer fake.copyBlobsFromSameStorageAccountMutex.Unlock()
	fake.CopyBlobsFromSameStorageAccountStub = stub
}

func (fake *FakeContainer) CopyBlobsFromSameStorageAccountArgsForCall(i int) (string, []azure.BlobId) {
	fake.copyBlobsFromSameStorageAccountMutex.RLock()
	defer fake.copyBlobsFromSameStorageAccountMutex.RUnlock()
	argsForCall := fake.copyBlobsFromSameStorageAccountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeContainer) CopyBlobsFromSameStorageAccountReturns(result1 error) {
	fake.copyBlobsFromSameStorageAccountMutex.Lock()
	defer fake.copyBlobsFromSameStorageAccountMutex.Unlock()
	fake.CopyBlobsFromSameStorageAccountStub = nil
	fake.copyBlobsFromSameStorageAccountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainer) CopyBlobsFromSameStorageAccountReturnsOnCall(i int, result1 error) {
	fake.copyBlobsFromSameStorageAccountMutex.Lock()
	defer fake.copyBlobsFromSameStorageAccountMutex.Unlock()
	fake.CopyBlobsFromSameStorageAccountStub = nil
	if fake.copyBlobsFromSameStorageAccountReturnsOnCall == nil {
		fake.copyBlobsFromSameStorageAccountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.copyBlobsFromSameStorageAccountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainer) ListBlobs() ([]azure.BlobId, error) {
	fake.listBlobsMutex.Lock()
	ret, specificReturn := fake.listBlobsReturnsOnCall[len(fake.listBlobsArgsForCall)]
	fake.listBlobsArgsForCall = append(fake.listBlobsArgsForCall, struct {
	}{})
	stub := fake.ListBlobsStub
	fakeReturns := fake.listBlobsReturns
	fake.recordInvocation("ListBlobs", []interface{}{})
	fake.listBlobsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeContainer) ListBlobsCallCount() int {
	fake.listBlobsMutex.RLock()
	defer fake.listBlobsMutex.RUnlock()
	return len(fake.listBlobsArgsForCall)
}

func (fake *FakeContainer) ListBlobsCalls(stub func() ([]azure.BlobId, error)) {
	fake.listBlobsMutex.Lock()
	defer fake.listBlobsMutex.Unlock()
	fake.ListBlobsStub = stub
}

func (fake *FakeContainer) ListBlobsReturns(result1 []azure.BlobId, result2 error) {
	fake.listBlobsMutex.Lock()
	defer fake.listBlobsMutex.Unlock()
	fake.ListBlobsStub = nil
	fake.listBlobsReturns = struct {
		result1 []azure.BlobId
		result2 error
	}{result1, result2}
}

func (fake *FakeContainer) ListBlobsReturnsOnCall(i int, result1 []azure.BlobId, result2 error) {
	fake.listBlobsMutex.Lock()
	defer fake.listBlobsMutex.Unlock()
	fake.ListBlobsStub = nil
	if fake.listBlobsReturnsOnCall == nil {
		fake.listBlobsReturnsOnCall = make(map[int]struct {
			result1 []azure.BlobId
			result2 error
		})
	}
	fake.listBlobsReturnsOnCall[i] = struct {
		result1 []azure.BlobId
		result2 error
	}{result1, result2}
}

func (fake *FakeContainer) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct {
	}{})
	stub := fake.NameStub
	fakeReturns := fake.nameReturns
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeContainer) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeContainer) NameCalls(stub func() string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = stub
}

func (fake *FakeContainer) NameReturns(result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeContainer) NameReturnsOnCall(i int, result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeContainer) SoftDeleteEnabled() (bool, error) {
	fake.softDeleteEnabledMutex.Lock()
	ret, specificReturn := fake.softDeleteEnabledReturnsOnCall[len(fake.softDeleteEnabledArgsForCall)]
	fake.softDeleteEnabledArgsForCall = append(fake.softDeleteEnabledArgsForCall, struct {
	}{})
	stub := fake.SoftDeleteEnabledStub
	fakeReturns := fake.softDeleteEnabledReturns
	fake.recordInvocation("SoftDeleteEnabled", []interface{}{})
	fake.softDeleteEnabledMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeContainer) SoftDeleteEnabledCallCount() int {
	fake.softDeleteEnabledMutex.RLock()
	defer fake.softDeleteEnabledMutex.RUnlock()
	return len(fake.softDeleteEnabledArgsForCall)
}

func (fake *FakeContainer) SoftDeleteEnabledCalls(stub func() (bool, error)) {
	fake.softDeleteEnabledMutex.Lock()
	defer fake.softDeleteEnabledMutex.Unlock()
	fake.SoftDeleteEnabledStub = stub
}

func (fake *FakeContainer) SoftDeleteEnabledReturns(result1 bool, result2 error) {
	fake.softDeleteEnabledMutex.Lock()
	defer fake.softDeleteEnabledMutex.Unlock()
	fake.SoftDeleteEnabledStub = nil
	fake.softDeleteEnabledReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeContainer) SoftDeleteEnabledReturnsOnCall(i int, result1 bool, result2 error) {
	fake.softDeleteEnabledMutex.Lock()
	defer fake.softDeleteEnabledMutex.Unlock()
	fake.SoftDeleteEnabledStub = nil
	if fake.softDeleteEnabledReturnsOnCall == nil {
		fake.softDeleteEnabledReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.softDeleteEnabledReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeContainer) URL() string {
	fake.uRLMutex.Lock()
	ret, specificReturn := fake.uRLReturnsOnCall[len(fake.uRLArgsForCall)]
	fake.uRLArgsForCall = append(fake.uRLArgsForCall, struct {
	}{})
	stub := fake.URLStub
	fakeReturns := fake.uRLReturns
	fake.recordInvocation("URL", []interface{}{})
	fake.uRLMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeContainer) URLCallCount() int {
	fake.uRLMutex.RLock()
	defer fake.uRLMutex.RUnlock()
	return len(fake.uRLArgsForCall)
}

func (fake *FakeContainer) URLCalls(stub func() string) {
	fake.uRLMutex.Lock()
	defer fake.uRLMutex.Unlock()
	fake.URLStub = stub
}

func (fake *FakeContainer) URLReturns(result1 string) {
	fake.uRLMutex.Lock()
	defer fake.uRLMutex.Unlock()
	fake.URLStub = nil
	fake.uRLReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeContainer) URLReturnsOnCall(i int, result1 string) {
	fake.uRLMutex.Lock()
	defer fake.uRLMutex.Unlock()
	fake.URLStub = nil
	if fake.uRLReturnsOnCall == nil {
		fake.uRLReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.uRLReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeContainer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.copyBlobsFromDifferentStorageAccountMutex.RLock()
	defer fake.copyBlobsFromDifferentStorageAccountMutex.RUnlock()
	fake.copyBlobsFromSameStorageAccountMutex.RLock()
	defer fake.copyBlobsFromSameStorageAccountMutex.RUnlock()
	fake.listBlobsMutex.RLock()
	defer fake.listBlobsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.softDeleteEnabledMutex.RLock()
	defer fake.softDeleteEnabledMutex.RUnlock()
	fake.uRLMutex.RLock()
	defer fake.uRLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeContainer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ azure.Container = new(FakeContainer)
