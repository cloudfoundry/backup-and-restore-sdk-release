// Code generated by go-bindata.
// sources:
// client/main.go
// DO NOT EDIT!

package binmock

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xc1\x6e\xdb\x46\x10\x3d\x73\xbf\x62\xca\x43\x41\xa2\x0a\x99\xf8\x52\xc0\x81\x0f\xb2\xac\xa0\x44\x03\xc9\x30\xe5\x06\x41\x90\xc3\x8a\x1c\x52\xd3\x92\xbb\xcc\xee\x52\xb2\x10\x18\xe8\x8f\xf4\xe7\xfa\x25\xc5\x2c\x29\x47\x89\x64\xf7\x24\xee\xec\x9b\x79\x6f\x66\xde\x2a\x4d\x61\xa6\xbb\xbd\xa1\x7a\xe3\x20\x9a\xc5\x70\xf1\xfa\xcd\xaf\xaf\x6e\x0d\x5a\x54\x0e\x6e\x69\xab\x9d\x6c\x20\xd7\x95\xdb\x49\x83\x13\xc8\x54\x91\xc0\xb4\x69\xc0\x67\x58\x60\xa0\xd9\x62\x99\x88\x34\x15\x69\x0a\xab\x0d\x59\xe8\x8c\xae\x8d\x6c\x41\xaa\x12\xdc\x06\x41\x16\x85\x6e\x3b\xa9\xf6\xa4\x6a\x68\xa5\x43\x43\xb2\xb1\x20\x0d\x42\x2b\x4b\x04\xb9\x95\xd4\xc8\x75\x83\xd0\xab\x12\x0d\xd7\xe1\x34\x87\xa6\xb5\xa0\x2b\x7f\xf0\x37\xfe\x6b\xda\xc9\x62\x83\xf0\x9e\x0a\x54\x16\x27\xf0\x07\x1a\x4b\x5a\xc1\x45\xf2\x1a\x22\x06\x84\xe3\xd5\xbf\x7f\xff\x13\xbf\xe5\x62\x7b\xdd\x43\x2b\xf7\xa0\xb4\x83\xde\x22\x38\x16\x59\x51\x83\x80\x0f\x05\x76\x0e\x48\x01\x2b\x6c\x48\xaa\x02\x61\x47\x6e\xe3\x99\xc6\x3a\x87\xde\x3e\x8e\x65\xf4\xda\x49\x52\x20\xa1\xd0\xdd\xfe\xa0\x6f\xc4\x82\x74\x0c\xdd\x38\xd7\x5d\xa6\xe9\x6e\xb7\x4b\xa4\x97\x9b\x68\x53\xa7\xcd\x80\xb1\xe9\xfb\x6c\x36\x5f\xe4\xf3\x57\x17\xc9\xeb\xb1\xf6\xbd\x6a\xd0\xf2\x38\xbf\xf4\x64\xb0\x84\xf5\x1e\x64\xd7\x35\x54\xf8\xb1\x34\x72\x07\xda\x80\xac\x0d\x62\x09\x4e\xb3\xe0\x9d\x21\x47\xaa\x9e\x80\x1d\x97\xc3\x65\x4a\xb2\xce\xd0\xba\x77\x58\x1e\x4d\xec\xa0\x8d\xec\x77\x00\xad\x40\x2a\x08\xa7\x39\x64\x79\x08\xd7\xd3\x3c\xcb\x27\x5c\xe4\x43\xb6\xfa\x6d\x79\xbf\x82\x0f\xd3\xbb\xbb\xe9\x62\x95\xcd\x73\x58\xde\xc1\x6c\xb9\xb8\xc9\x56\xd9\x72\x91\xc3\xf2\x1d\x4c\x17\x1f\xe1\xf7\x6c\x71\x33\x01\x24\xb7\x41\x03\xf8\xd0\x19\xee\x40\x1b\x20\x9e\xe4\x37\x4b\xe4\x88\xdf\xa9\xa8\xf4\xa0\xca\x76\x58\x50\x45\x05\x34\x52\xd5\xbd\xac\x11\x6a\xbd\x45\xa3\xd8\x24\x1d\x9a\x96\x2c\xaf\xd5\xb2\x8b\xb8\x4c\x43\x2d\x39\xe9\x7c\xe8\xa4\xb5\x44\x88\x4e\x16\x7f\x71\x91\x56\x92\x12\x82\xda\x4e\x1b\x07\x91\x08\x42\x54\x85\x2e\x49\xd5\xe9\x9f\x56\xab\x50\x04\x61\xd5\x3a\xfe\x51\xe8\x52\xde\x53\x28\x44\x10\xae\xfb\x8a\x34\x47\xd7\x7b\x87\x96\x3f\xb4\x0d\x45\x2c\xc4\x56\x1a\xa0\x12\x95\xa3\x8a\xd0\x00\x4f\x4f\xd5\x3e\xea\x8d\x6f\xee\x4d\x73\x08\x8a\xaa\x57\x85\xe7\x8f\x62\xf8\x2a\x02\xe6\xcb\xd4\x56\x17\x5e\xf5\x1d\x7e\xe9\xd1\x3a\xb8\xbc\x82\x93\xe0\xd7\xc7\x67\xd0\x49\x56\xc2\xd5\x11\xff\x73\xb0\xa9\xa9\x2d\x5c\x81\xb6\xfe\xeb\xd3\x9b\xcb\xcf\xcf\x21\xe7\x6a\x3b\x00\xe7\x6a\x4b\x46\xab\x28\x16\x22\xb0\x85\x54\x0a\x0d\x6b\xf3\x83\x48\x16\xb8\xcb\x87\x58\xa4\x6d\x92\xbb\x92\x54\x2c\x02\xde\xdc\x08\x4d\xf8\x7a\x68\xf3\x19\x22\x9f\x04\x57\x6c\x63\x54\x65\xf4\x02\x68\xf2\x54\x74\x85\x0f\x2e\x8a\x63\x11\x3c\x0a\x11\xac\xfb\xaa\x1a\x35\xf1\x4e\x58\xd3\xb5\x0f\xe5\x7e\xdc\x51\x18\xc6\x22\xa0\x0a\xd0\x78\x10\x13\x30\x66\xce\xeb\x46\x13\x0d\xe9\x71\x32\x9c\xcf\xf3\xc7\x6f\x7d\xf6\x4f\x57\xa0\xa8\xf1\xbd\x74\x52\x51\x11\xa1\x31\xa3\x08\x83\xb6\xd3\xfe\x6f\x66\xa4\x61\xc7\x24\xb7\xda\xba\x28\x1c\x1f\x79\xf8\xcb\x93\x13\x26\x10\x86\x13\x18\x99\x9f\xc4\xbd\x50\xfe\x47\x55\x03\xd9\x8f\x1e\x19\xa2\x6c\x92\xd3\x76\x6f\x70\x68\xf7\x20\x34\xb9\xd6\xe5\x3e\x4e\x86\x70\xf4\xf3\x79\x82\xff\xef\xbb\x6a\x5d\xf2\xae\x33\xa4\xdc\x68\x00\xdd\xbb\x09\x9c\xaf\x36\x5e\xc7\x67\xb2\xd0\x98\x97\xb2\x06\x3e\x36\xe3\x03\xb9\x93\x15\x8d\x38\xbe\x9b\xe9\x12\x63\xf1\x28\x84\xdb\x77\x78\xfa\x7e\xf8\x05\xf6\x85\xe3\x4e\xb2\x12\x00\x0e\x2f\x32\xf0\xef\x02\x3e\x7d\x3e\x9c\xd9\xfd\xc7\xe7\xc1\xa4\x4f\xe7\x73\x04\xe3\x4a\xbe\x31\x0c\xdd\x1e\x91\x0c\x8d\x1c\x05\x0e\x8a\x81\x94\x13\x8f\xe2\xbf\x00\x00\x00\xff\xff\xc1\x44\x4d\x59\x64\x07\x00\x00")

func clientMainGoBytes() ([]byte, error) {
	return bindataRead(
		_clientMainGo,
		"client/main.go",
	)
}

func clientMainGo() (*asset, error) {
	bytes, err := clientMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/main.go", size: 1892, mode: os.FileMode(420), modTime: time.Unix(1502124799, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/main.go": clientMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"main.go": &bintree{clientMainGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

