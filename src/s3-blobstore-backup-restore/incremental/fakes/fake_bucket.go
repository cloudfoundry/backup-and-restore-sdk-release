// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"s3-blobstore-backup-restore/incremental"
	"sync"
)

type FakeBucket struct {
	CopyBlobFromBucketStub        func(incremental.Bucket, string, string) error
	copyBlobFromBucketMutex       sync.RWMutex
	copyBlobFromBucketArgsForCall []struct {
		arg1 incremental.Bucket
		arg2 string
		arg3 string
	}
	copyBlobFromBucketReturns struct {
		result1 error
	}
	copyBlobFromBucketReturnsOnCall map[int]struct {
		result1 error
	}
	CopyBlobWithinBucketStub        func(string, string) error
	copyBlobWithinBucketMutex       sync.RWMutex
	copyBlobWithinBucketArgsForCall []struct {
		arg1 string
		arg2 string
	}
	copyBlobWithinBucketReturns struct {
		result1 error
	}
	copyBlobWithinBucketReturnsOnCall map[int]struct {
		result1 error
	}
	HasBlobStub        func(string) (bool, error)
	hasBlobMutex       sync.RWMutex
	hasBlobArgsForCall []struct {
		arg1 string
	}
	hasBlobReturns struct {
		result1 bool
		result2 error
	}
	hasBlobReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	ListBlobsStub        func(string) ([]incremental.Blob, error)
	listBlobsMutex       sync.RWMutex
	listBlobsArgsForCall []struct {
		arg1 string
	}
	listBlobsReturns struct {
		result1 []incremental.Blob
		result2 error
	}
	listBlobsReturnsOnCall map[int]struct {
		result1 []incremental.Blob
		result2 error
	}
	ListDirectoriesStub        func() ([]string, error)
	listDirectoriesMutex       sync.RWMutex
	listDirectoriesArgsForCall []struct {
	}
	listDirectoriesReturns struct {
		result1 []string
		result2 error
	}
	listDirectoriesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct {
	}
	nameReturns struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	RegionStub        func() string
	regionMutex       sync.RWMutex
	regionArgsForCall []struct {
	}
	regionReturns struct {
		result1 string
	}
	regionReturnsOnCall map[int]struct {
		result1 string
	}
	UploadBlobStub        func(string, string) error
	uploadBlobMutex       sync.RWMutex
	uploadBlobArgsForCall []struct {
		arg1 string
		arg2 string
	}
	uploadBlobReturns struct {
		result1 error
	}
	uploadBlobReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBucket) CopyBlobFromBucket(arg1 incremental.Bucket, arg2 string, arg3 string) error {
	fake.copyBlobFromBucketMutex.Lock()
	ret, specificReturn := fake.copyBlobFromBucketReturnsOnCall[len(fake.copyBlobFromBucketArgsForCall)]
	fake.copyBlobFromBucketArgsForCall = append(fake.copyBlobFromBucketArgsForCall, struct {
		arg1 incremental.Bucket
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.CopyBlobFromBucketStub
	fakeReturns := fake.copyBlobFromBucketReturns
	fake.recordInvocation("CopyBlobFromBucket", []interface{}{arg1, arg2, arg3})
	fake.copyBlobFromBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBucket) CopyBlobFromBucketCallCount() int {
	fake.copyBlobFromBucketMutex.RLock()
	defer fake.copyBlobFromBucketMutex.RUnlock()
	return len(fake.copyBlobFromBucketArgsForCall)
}

func (fake *FakeBucket) CopyBlobFromBucketCalls(stub func(incremental.Bucket, string, string) error) {
	fake.copyBlobFromBucketMutex.Lock()
	defer fake.copyBlobFromBucketMutex.Unlock()
	fake.CopyBlobFromBucketStub = stub
}

func (fake *FakeBucket) CopyBlobFromBucketArgsForCall(i int) (incremental.Bucket, string, string) {
	fake.copyBlobFromBucketMutex.RLock()
	defer fake.copyBlobFromBucketMutex.RUnlock()
	argsForCall := fake.copyBlobFromBucketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBucket) CopyBlobFromBucketReturns(result1 error) {
	fake.copyBlobFromBucketMutex.Lock()
	defer fake.copyBlobFromBucketMutex.Unlock()
	fake.CopyBlobFromBucketStub = nil
	fake.copyBlobFromBucketReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBucket) CopyBlobFromBucketReturnsOnCall(i int, result1 error) {
	fake.copyBlobFromBucketMutex.Lock()
	defer fake.copyBlobFromBucketMutex.Unlock()
	fake.CopyBlobFromBucketStub = nil
	if fake.copyBlobFromBucketReturnsOnCall == nil {
		fake.copyBlobFromBucketReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.copyBlobFromBucketReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBucket) CopyBlobWithinBucket(arg1 string, arg2 string) error {
	fake.copyBlobWithinBucketMutex.Lock()
	ret, specificReturn := fake.copyBlobWithinBucketReturnsOnCall[len(fake.copyBlobWithinBucketArgsForCall)]
	fake.copyBlobWithinBucketArgsForCall = append(fake.copyBlobWithinBucketArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CopyBlobWithinBucketStub
	fakeReturns := fake.copyBlobWithinBucketReturns
	fake.recordInvocation("CopyBlobWithinBucket", []interface{}{arg1, arg2})
	fake.copyBlobWithinBucketMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBucket) CopyBlobWithinBucketCallCount() int {
	fake.copyBlobWithinBucketMutex.RLock()
	defer fake.copyBlobWithinBucketMutex.RUnlock()
	return len(fake.copyBlobWithinBucketArgsForCall)
}

func (fake *FakeBucket) CopyBlobWithinBucketCalls(stub func(string, string) error) {
	fake.copyBlobWithinBucketMutex.Lock()
	defer fake.copyBlobWithinBucketMutex.Unlock()
	fake.CopyBlobWithinBucketStub = stub
}

func (fake *FakeBucket) CopyBlobWithinBucketArgsForCall(i int) (string, string) {
	fake.copyBlobWithinBucketMutex.RLock()
	defer fake.copyBlobWithinBucketMutex.RUnlock()
	argsForCall := fake.copyBlobWithinBucketArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBucket) CopyBlobWithinBucketReturns(result1 error) {
	fake.copyBlobWithinBucketMutex.Lock()
	defer fake.copyBlobWithinBucketMutex.Unlock()
	fake.CopyBlobWithinBucketStub = nil
	fake.copyBlobWithinBucketReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBucket) CopyBlobWithinBucketReturnsOnCall(i int, result1 error) {
	fake.copyBlobWithinBucketMutex.Lock()
	defer fake.copyBlobWithinBucketMutex.Unlock()
	fake.CopyBlobWithinBucketStub = nil
	if fake.copyBlobWithinBucketReturnsOnCall == nil {
		fake.copyBlobWithinBucketReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.copyBlobWithinBucketReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBucket) HasBlob(arg1 string) (bool, error) {
	fake.hasBlobMutex.Lock()
	ret, specificReturn := fake.hasBlobReturnsOnCall[len(fake.hasBlobArgsForCall)]
	fake.hasBlobArgsForCall = append(fake.hasBlobArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.HasBlobStub
	fakeReturns := fake.hasBlobReturns
	fake.recordInvocation("HasBlob", []interface{}{arg1})
	fake.hasBlobMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBucket) HasBlobCallCount() int {
	fake.hasBlobMutex.RLock()
	defer fake.hasBlobMutex.RUnlock()
	return len(fake.hasBlobArgsForCall)
}

func (fake *FakeBucket) HasBlobCalls(stub func(string) (bool, error)) {
	fake.hasBlobMutex.Lock()
	defer fake.hasBlobMutex.Unlock()
	fake.HasBlobStub = stub
}

func (fake *FakeBucket) HasBlobArgsForCall(i int) string {
	fake.hasBlobMutex.RLock()
	defer fake.hasBlobMutex.RUnlock()
	argsForCall := fake.hasBlobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBucket) HasBlobReturns(result1 bool, result2 error) {
	fake.hasBlobMutex.Lock()
	defer fake.hasBlobMutex.Unlock()
	fake.HasBlobStub = nil
	fake.hasBlobReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeBucket) HasBlobReturnsOnCall(i int, result1 bool, result2 error) {
	fake.hasBlobMutex.Lock()
	defer fake.hasBlobMutex.Unlock()
	fake.HasBlobStub = nil
	if fake.hasBlobReturnsOnCall == nil {
		fake.hasBlobReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.hasBlobReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeBucket) ListBlobs(arg1 string) ([]incremental.Blob, error) {
	fake.listBlobsMutex.Lock()
	ret, specificReturn := fake.listBlobsReturnsOnCall[len(fake.listBlobsArgsForCall)]
	fake.listBlobsArgsForCall = append(fake.listBlobsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ListBlobsStub
	fakeReturns := fake.listBlobsReturns
	fake.recordInvocation("ListBlobs", []interface{}{arg1})
	fake.listBlobsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBucket) ListBlobsCallCount() int {
	fake.listBlobsMutex.RLock()
	defer fake.listBlobsMutex.RUnlock()
	return len(fake.listBlobsArgsForCall)
}

func (fake *FakeBucket) ListBlobsCalls(stub func(string) ([]incremental.Blob, error)) {
	fake.listBlobsMutex.Lock()
	defer fake.listBlobsMutex.Unlock()
	fake.ListBlobsStub = stub
}

func (fake *FakeBucket) ListBlobsArgsForCall(i int) string {
	fake.listBlobsMutex.RLock()
	defer fake.listBlobsMutex.RUnlock()
	argsForCall := fake.listBlobsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBucket) ListBlobsReturns(result1 []incremental.Blob, result2 error) {
	fake.listBlobsMutex.Lock()
	defer fake.listBlobsMutex.Unlock()
	fake.ListBlobsStub = nil
	fake.listBlobsReturns = struct {
		result1 []incremental.Blob
		result2 error
	}{result1, result2}
}

func (fake *FakeBucket) ListBlobsReturnsOnCall(i int, result1 []incremental.Blob, result2 error) {
	fake.listBlobsMutex.Lock()
	defer fake.listBlobsMutex.Unlock()
	fake.ListBlobsStub = nil
	if fake.listBlobsReturnsOnCall == nil {
		fake.listBlobsReturnsOnCall = make(map[int]struct {
			result1 []incremental.Blob
			result2 error
		})
	}
	fake.listBlobsReturnsOnCall[i] = struct {
		result1 []incremental.Blob
		result2 error
	}{result1, result2}
}

func (fake *FakeBucket) ListDirectories() ([]string, error) {
	fake.listDirectoriesMutex.Lock()
	ret, specificReturn := fake.listDirectoriesReturnsOnCall[len(fake.listDirectoriesArgsForCall)]
	fake.listDirectoriesArgsForCall = append(fake.listDirectoriesArgsForCall, struct {
	}{})
	stub := fake.ListDirectoriesStub
	fakeReturns := fake.listDirectoriesReturns
	fake.recordInvocation("ListDirectories", []interface{}{})
	fake.listDirectoriesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBucket) ListDirectoriesCallCount() int {
	fake.listDirectoriesMutex.RLock()
	defer fake.listDirectoriesMutex.RUnlock()
	return len(fake.listDirectoriesArgsForCall)
}

func (fake *FakeBucket) ListDirectoriesCalls(stub func() ([]string, error)) {
	fake.listDirectoriesMutex.Lock()
	defer fake.listDirectoriesMutex.Unlock()
	fake.ListDirectoriesStub = stub
}

func (fake *FakeBucket) ListDirectoriesReturns(result1 []string, result2 error) {
	fake.listDirectoriesMutex.Lock()
	defer fake.listDirectoriesMutex.Unlock()
	fake.ListDirectoriesStub = nil
	fake.listDirectoriesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeBucket) ListDirectoriesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listDirectoriesMutex.Lock()
	defer fake.listDirectoriesMutex.Unlock()
	fake.ListDirectoriesStub = nil
	if fake.listDirectoriesReturnsOnCall == nil {
		fake.listDirectoriesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listDirectoriesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeBucket) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct {
	}{})
	stub := fake.NameStub
	fakeReturns := fake.nameReturns
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBucket) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeBucket) NameCalls(stub func() string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = stub
}

func (fake *FakeBucket) NameReturns(result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBucket) NameReturnsOnCall(i int, result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeBucket) Region() string {
	fake.regionMutex.Lock()
	ret, specificReturn := fake.regionReturnsOnCall[len(fake.regionArgsForCall)]
	fake.regionArgsForCall = append(fake.regionArgsForCall, struct {
	}{})
	stub := fake.RegionStub
	fakeReturns := fake.regionReturns
	fake.recordInvocation("Region", []interface{}{})
	fake.regionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBucket) RegionCallCount() int {
	fake.regionMutex.RLock()
	defer fake.regionMutex.RUnlock()
	return len(fake.regionArgsForCall)
}

func (fake *FakeBucket) RegionCalls(stub func() string) {
	fake.regionMutex.Lock()
	defer fake.regionMutex.Unlock()
	fake.RegionStub = stub
}

func (fake *FakeBucket) RegionReturns(result1 string) {
	fake.regionMutex.Lock()
	defer fake.regionMutex.Unlock()
	fake.RegionStub = nil
	fake.regionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBucket) RegionReturnsOnCall(i int, result1 string) {
	fake.regionMutex.Lock()
	defer fake.regionMutex.Unlock()
	fake.RegionStub = nil
	if fake.regionReturnsOnCall == nil {
		fake.regionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.regionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeBucket) UploadBlob(arg1 string, arg2 string) error {
	fake.uploadBlobMutex.Lock()
	ret, specificReturn := fake.uploadBlobReturnsOnCall[len(fake.uploadBlobArgsForCall)]
	fake.uploadBlobArgsForCall = append(fake.uploadBlobArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.UploadBlobStub
	fakeReturns := fake.uploadBlobReturns
	fake.recordInvocation("UploadBlob", []interface{}{arg1, arg2})
	fake.uploadBlobMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBucket) UploadBlobCallCount() int {
	fake.uploadBlobMutex.RLock()
	defer fake.uploadBlobMutex.RUnlock()
	return len(fake.uploadBlobArgsForCall)
}

func (fake *FakeBucket) UploadBlobCalls(stub func(string, string) error) {
	fake.uploadBlobMutex.Lock()
	defer fake.uploadBlobMutex.Unlock()
	fake.UploadBlobStub = stub
}

func (fake *FakeBucket) UploadBlobArgsForCall(i int) (string, string) {
	fake.uploadBlobMutex.RLock()
	defer fake.uploadBlobMutex.RUnlock()
	argsForCall := fake.uploadBlobArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBucket) UploadBlobReturns(result1 error) {
	fake.uploadBlobMutex.Lock()
	defer fake.uploadBlobMutex.Unlock()
	fake.UploadBlobStub = nil
	fake.uploadBlobReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBucket) UploadBlobReturnsOnCall(i int, result1 error) {
	fake.uploadBlobMutex.Lock()
	defer fake.uploadBlobMutex.Unlock()
	fake.UploadBlobStub = nil
	if fake.uploadBlobReturnsOnCall == nil {
		fake.uploadBlobReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uploadBlobReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBucket) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.copyBlobFromBucketMutex.RLock()
	defer fake.copyBlobFromBucketMutex.RUnlock()
	fake.copyBlobWithinBucketMutex.RLock()
	defer fake.copyBlobWithinBucketMutex.RUnlock()
	fake.hasBlobMutex.RLock()
	defer fake.hasBlobMutex.RUnlock()
	fake.listBlobsMutex.RLock()
	defer fake.listBlobsMutex.RUnlock()
	fake.listDirectoriesMutex.RLock()
	defer fake.listDirectoriesMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.regionMutex.RLock()
	defer fake.regionMutex.RUnlock()
	fake.uploadBlobMutex.RLock()
	defer fake.uploadBlobMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBucket) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ incremental.Bucket = new(FakeBucket)
