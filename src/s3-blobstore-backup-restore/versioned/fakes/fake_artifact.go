// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"s3-blobstore-backup-restore/versioned"
	"sync"
)

type FakeArtifact struct {
	LoadStub        func() (map[string]versioned.BucketSnapshot, error)
	loadMutex       sync.RWMutex
	loadArgsForCall []struct {
	}
	loadReturns struct {
		result1 map[string]versioned.BucketSnapshot
		result2 error
	}
	loadReturnsOnCall map[int]struct {
		result1 map[string]versioned.BucketSnapshot
		result2 error
	}
	SaveStub        func(map[string]versioned.BucketSnapshot) error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
		arg1 map[string]versioned.BucketSnapshot
	}
	saveReturns struct {
		result1 error
	}
	saveReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeArtifact) Load() (map[string]versioned.BucketSnapshot, error) {
	fake.loadMutex.Lock()
	ret, specificReturn := fake.loadReturnsOnCall[len(fake.loadArgsForCall)]
	fake.loadArgsForCall = append(fake.loadArgsForCall, struct {
	}{})
	stub := fake.LoadStub
	fakeReturns := fake.loadReturns
	fake.recordInvocation("Load", []interface{}{})
	fake.loadMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeArtifact) LoadCallCount() int {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	return len(fake.loadArgsForCall)
}

func (fake *FakeArtifact) LoadCalls(stub func() (map[string]versioned.BucketSnapshot, error)) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = stub
}

func (fake *FakeArtifact) LoadReturns(result1 map[string]versioned.BucketSnapshot, result2 error) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = nil
	fake.loadReturns = struct {
		result1 map[string]versioned.BucketSnapshot
		result2 error
	}{result1, result2}
}

func (fake *FakeArtifact) LoadReturnsOnCall(i int, result1 map[string]versioned.BucketSnapshot, result2 error) {
	fake.loadMutex.Lock()
	defer fake.loadMutex.Unlock()
	fake.LoadStub = nil
	if fake.loadReturnsOnCall == nil {
		fake.loadReturnsOnCall = make(map[int]struct {
			result1 map[string]versioned.BucketSnapshot
			result2 error
		})
	}
	fake.loadReturnsOnCall[i] = struct {
		result1 map[string]versioned.BucketSnapshot
		result2 error
	}{result1, result2}
}

func (fake *FakeArtifact) Save(arg1 map[string]versioned.BucketSnapshot) error {
	fake.saveMutex.Lock()
	ret, specificReturn := fake.saveReturnsOnCall[len(fake.saveArgsForCall)]
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
		arg1 map[string]versioned.BucketSnapshot
	}{arg1})
	stub := fake.SaveStub
	fakeReturns := fake.saveReturns
	fake.recordInvocation("Save", []interface{}{arg1})
	fake.saveMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeArtifact) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeArtifact) SaveCalls(stub func(map[string]versioned.BucketSnapshot) error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = stub
}

func (fake *FakeArtifact) SaveArgsForCall(i int) map[string]versioned.BucketSnapshot {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	argsForCall := fake.saveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeArtifact) SaveReturns(result1 error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeArtifact) SaveReturnsOnCall(i int, result1 error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	if fake.saveReturnsOnCall == nil {
		fake.saveReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeArtifact) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeArtifact) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ versioned.Artifact = new(FakeArtifact)
